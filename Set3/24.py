#!/usr/bin/env python3
"""."""
import random
import time
import sys
import os

lsb32 = lambda x: int(0xffffffff & x)

def temper(y):
    y ^= y >> 11
    y ^= y << 7 & 0x9D2C5680
    y ^= y << 15 & 0xEFC60000
    y ^= y >> 18
    return y

class RNG:
    def __init__(self, seed):
        self.mt = [0] * 624
        self.mt[0] = seed
        self.index = 624
        for i in range(1, 624):
            self.mt[i] = lsb32(1812433253 * (self.mt[i - 1] ^ self.mt[i - 1] >> 30) + i)

    def rand(self):
        if self.index >= 624:
            self.twist()
        y = temper(self.mt[self.index])
        self.index += 1
        return lsb32(y)

    def twist(self):
        for i in range(624):
            y = lsb32((self.mt[i] & 0x80000000) + 
                      (self.mt[(i + 1) % 624] & 0x7fffffff))
            self.mt[i] = self.mt[(i + 397) % 624] ^ y >> 1
            if y % 2 != 0:
                self.mt[i] ^= 0x9908b0df
        self.index = 0

r = int.from_bytes(os.urandom(2), 'little')
plain = b'A' * 14 + os.urandom(random.randint(0, 10000))

def stream(seed, m):
    rng = RNG(seed)
    return b''.join(bytes([b ^ rng.rand() % 256]) for b in m)

def timeseeded(tok, win):
    t = int(time.time())
    for s in range(t - win, t + win):
        if RNG(s).rand() == tok:
            return True
    return False

print("SEED:", r)
c = stream(r, plain)

# Recovering the "key"
p = 0
for s in range(0, 2 ** 16):
    if c[:14] == stream(s, b'A' * 14):
        print(s)
        break
    pp = int(s * 100 / (2 ** 16))
    if pp > p:
        p = pp 
        print('{}%'.format(p))

# Checking if token is generated by a timeseeded RNG
tok = RNG(int(time.time())).rand()
print("TIMESEEDED:", timeseeded(tok, 100))
